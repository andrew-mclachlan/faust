#! /bin/bash -e

#####################################################################
#                                                                   #
#               Compiles Faust programs to JACK-QT                  #
#               (c) Grame, 2009-2018                                #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags

CXXFLAGS=$MYGCCFLAGS

#-------------------------------------------------------------------
# Set Faust include path

ARCHFILE="jack-qt.cpp"
ARCHLIB="-L/usr/local/lib -ljack"
PATH=$PATH:/usr/local/bin

#-------------------------------------------------------------------------------
# Search for qmake or qmake-qt4

QMAKE=$(which qmake-qt5 || which qmake-qt4 || echo qmake)

#PHASE 2 : dispatch command arguments

OSCINC=""
QTDEFS=""
OSCLIB=""
DEPLOY=""
NVOICES=-1
SOUNDFILE="0"
SOUNDFILEDEFS=""
SOUNDFILELIBS=""

while [ $1 ]
do
    p=$1

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2jaqt [-httpd] [-qrcode] [-soundfile] [-nvoices <num>] [-midi] [-osc] <file.dsp>"
        echo "Use '-httpd' to activate HTTP control"
        echo "Use '-qrcode' to activate QR code generation"
        echo "Use '-soundfile' when compiling DSP using 'soundfile' primitive, to add needed resources"
        echo "Use '-nvoices <num>' to produce a polyphonic self-contained DSP with <num> voices, ready to be used with MIDI or OSC"
        echo "Use '-midi' to activate MIDI control"
        echo "Use '-osc' to activate OSC control"
        exit
    fi
    
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-deploy" ]; then
        DEPLOY="yes"
    elif [ $p = "-nvoices" ]; then
        POLYDEFS="DEFINES += POLY"
        shift
        NVOICES=$1
        if [ $NVOICES -ge 0 ]; then
            CXXFLAGS="$CXXFLAGS -DNVOICES=$NVOICES"
        fi
    elif [ $p = "-midi" ]; then
        MIDIDEFS="DEFINES += MIDICTRL"
    elif [ $p = "-soundfile" ]; then
        SOUNDFILE="1"
        SOUNDFILEDEFS="DEFINES += SOUNDFILE"
        SOUNDFILELIBS=`pkg-config --cflags --static --libs sndfile`
    elif [ $p = "-osc" ]; then
        OSCDEFS="DEFINES += OSCCTRL"
        OSCLIBS="-lOSCFaust"
	elif [ "$p" = "-httpd" ]; then
		HTTPDEFS="DEFINES += HTTPCTRL"
		HTTPLIBS="-lHTTPDFaust -lmicrohttpd"
	elif [ "$p" = "-qrcode" ]; then # requires -httpd
		QRDEFS="DEFINES += QRCODECTRL"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
    else
	    OPTIONS="$OPTIONS $p"        
	fi

shift

done

#-------------------------------------------------------------------
# Check Darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    ARCHLIB+=" -framework CoreMIDI -framework CoreFoundation -framework CoreAudio"
    HTTPLIBS="-L/opt/local/lib $HTTPLIBS"
    SYS_VERSION=$(uname -v | cut -d : -f1 | cut -d. -f1 | cut -d' ' -f4)
	if [ $SYS_VERSION -ge 13 ]
	then
	    SPEC="-spec macx-clang"
	    CLANGOPT="QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.9"  
	    CXXFLAGS="$CXXFLAGS -mmacosx-version-min=10.9"
	else
	    SPEC="-spec macx-g++"
	    CLANGOPT=""
	fi
    EXT=".app"
fi

#-------------------------------------------------------------------
# Check Linux specifics
#
if [[ $(uname) == Linux ]]; then
    ARCHLIB+=" -lasound"
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
	SRCDIR=$(dirname "$p")

    # creates a temporary dir 
    TDR=$(mktemp -d faust.XXXXXX)
	TMP="$TDR/${f%.dsp}"
    mkdir "$TMP"

    # compile faust to c++
 	faust -json -i -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit
  
    # compile c++ to binary
    (
	    cd "$TMP"
	    $QMAKE -project "QT += widgets printsupport network" "CONFIG+=warn_off" "$CLANGOPT" "INCLUDEPATH+=$CUR" "INCLUDEPATH+=$FAUSTINC" "QMAKE_CXXFLAGS=$CXXFLAGS -Wno-unused-parameter $FAUSTTOOLSFLAGS" "LIBS+=$ARCHLIB $SOUNDFILELIBS $OSCLIBS $HTTPLIBS" "HEADERS+=$FAUSTINC/faust/gui/faustqt.h" "RESOURCES+= $FAUSTINC/faust/gui/Styles/Grey.qrc" "$OSCDEFS" "$HTTPDEFS" "$QRDEFS" "$POLYDEFS" "$MIDIDEFS" "$SOUNDFILEDEFS"
	    $QMAKE $SPEC
        make
    ) > /dev/null || exit
    
     if [ "$SOUNDFILE" = "1" ]; then
        # get all soundfiles from the JSON file
        cat $p.json | awk '
                        BEGIN { FS=":"; SOFI=0; }
                            /"soundfile"/ { SOFI=1; }
                            /"url"/ {
                            if (SOFI) {
                                match($2, /"[^"]*/);
                                split(substr($2, RSTART+2, RLENGTH-3), res, ";");
                                for (x in res) print substr(res[x], 2, length(res[x])-2);
                                SOFI=0;
                            }
                        }
        ' > $p-tmp.txt
        # copy found soundfiles in the final binary
        for snd in $(cat $p-tmp.txt); do
            if [ -f $snd ]; then
            	if [ ${snd:0:1} = "/" ]; then 
                    echo "Warning: soundfile with absolute path is not copied !"
            	else
                    #create destination path and possibly create directory
                    sfpath="$TMP/${f%.dsp}$EXT/Contents/Resources/$(dirname $snd)/"
                    if ! [ -d $sfpath ]; then
                        echo "Create $sfpath"
                        mkdir $sfpath
                    fi
                    echo "Copy $snd in ${f%.dsp}$EXT"
                    cp $snd $sfpath
                fi
            else
                echo "Error: file $snd not found !"
            fi
        done
        rm $p-tmp.txt
    fi

    # on Mac add the qt libraries to the bundle
    if [[ $(uname) == Darwin ]]; then
        if [ "$DEPLOY" = "yes" ]; then
            macdeployqt "$TMP/${f%.dsp}$EXT" || exit
        fi
    fi

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    cp -r "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
    rm -rf "$TDR"
    rm $p.json

    # collect binary file name for FaustGIDE
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
done

echo $BINARIES


